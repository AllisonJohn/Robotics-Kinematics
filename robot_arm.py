# -*- coding: utf-8 -*-
"""Robot Arm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GaiZCwvmny45ceJ5V1Ciob8_kQhfzQxq
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib notebook 

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from IPython.display import HTML
import math

class XY_Plotter:
  """Takes a list of (x,y) coordinates and creates two seperate lists: one for x and one for y"""
  def __init__(self, points):
    self.points = points

  def getXframes(self):
    x = []
    for i in range(0,len(self.points)):
      x.append(self.points[i][1])
    return x

  def getYframes(self):
    y = []
    for i in range(0,len(self.points)):
      y.append(self.points[i][2])
    return y

class Line_Generator:
  """Line_Generator creates a line from any two points"""
  def __init__(self, x1, y1, x2, y2):
    self.x1 = x1
    self.y1 = y1
    self.x2 = x2
    self.y2 = y2
    self.lineLength = self.getLineLength(self.x1, self.x2, self.y1, self.y2)
    self.theta = math.atan2(y2-y1,x2-x1)

  def getLineLength(self, x1, x2, y1, y2):
    sum = (x1-x2)*(x1-x2) + (y1-y2)*(y1-y2)
    return math.sqrt(sum)

  def getLine(self):
    x = self.x1
    y = self.y1
    points = []
    t = 0
    v = 0.5
    oldD = self.lineLength+1
    newD = self.lineLength

    while (newD<oldD):
      points.append([t, x, y, self.theta])
      x += v * math.cos(self.theta)
      y += v * math.sin(self.theta)
      oldD = newD;
      newD = self.getLineLength(x, self.x2, y, self.y2)
      t+=1
    return points

currentJoints = [[0.0,110.0],[0,110.0+105.0],[0,110.0+105.0+95.0],[25.0,110.0+105.0+95.0],[25.0,110.0+105.0+95.0+160.0]]
segmentLengths = [[0,110.0],[0,105.0],[0,95.0],[25.0,0],[0,160.0]]

# These are the vectors that correspond to the 10 steps of arm manipulation in order to pick up the threader and insert it into the needle
# the base angle, wrist angle, and claw state are not plotted, but they are still in the vectors
pos0 = [-90, 0, 0, 0, 0, 0]
pos1 = [90, 0, 0, 0, 0, 0]
pos2 = [90, 56.249, 113.015, -79.264, 0, 30]
pos3 = [90, 56.249, 113.015, -79.264, 0, 0]
pos4 = [0, 56.249, 113.015, -79.264, 0, 30]
pos5 = [0, 43.992, 81.787, -35.778, 90,0]
pos6 = [0, 59.866, 50.275, -20.141, 90, 0]
pos7 = pos6
pos8 = pos5
pos9 = pos0

class Joint_Locations_Generator:
  """Can calculate the positions of 5 points of the robot arm based on the given angles"""
  def __init__(self, angles):
    self.angles = angles
    self.s = currentJoints
  def getCoordinates(self):
    # Each point's new positions is calculated, and all the corrdinates are returned
    self.gets0()
    self.gets1()
    self.gets2()
    self.gets3()
    self.gets4()
    return self.s
  def gets0(self):
    self.s[0] = [0,110]
  def gets1(self):
    self.s[1] = [self.s[0][0] + segmentLengths[1][1]*math.cos(math.radians(90.0-self.angles[1])), 
                 self.s[0][1] + segmentLengths[1][1]*math.sin(math.radians(90.0-self.angles[1]))]
  def gets2(self):
    self.s[2] = [self.s[1][0] + segmentLengths[2][1]*math.cos(math.radians(90.0-(self.angles[1]+self.angles[2]))), 
                 self.s[1][1] + segmentLengths[2][1]*math.sin(math.radians(90.0-(self.angles[1]+self.angles[2])))]
  def gets3(self):
    self.s[3] = [self.s[2][0] + segmentLengths[3][0]*math.cos(math.radians(-(self.angles[1]+self.angles[2]+self.angles[3]))), 
                 self.s[2][1] + segmentLengths[3][0]*math.sin(math.radians(-(self.angles[1]+self.angles[2]+self.angles[3])))]
  def gets4(self):
    self.s[4] = [self.s[3][0] + segmentLengths[4][1]*math.cos(math.radians(90.0-(self.angles[1]+self.angles[2]+self.angles[3]))), 
                 self.s[3][1] + segmentLengths[4][1]*math.sin(math.radians(90.0-(self.angles[1]+self.angles[2]+self.angles[3])))]

#create all the lines from the coodinates of a robot arm position

jlg = Joint_Locations_Generator(pos7)
cords = jlg.getCoordinates()

line1 = Line_Generator(cords[0][0],cords[0][1],cords[1][0],cords[1][1])
l1 = line1.getLine()
line2 = Line_Generator(cords[1][0],cords[1][1],cords[2][0],cords[2][1])
l2 = line2.getLine()
line3 = Line_Generator(cords[2][0],cords[2][1],cords[3][0],cords[3][1])
l3 = line3.getLine()
line4 = Line_Generator(cords[3][0],cords[3][1],cords[4][0],cords[4][1])
l4 = line4.getLine()

lines = l1+l2+l3+l4
p = XY_Plotter(lines)

# plotting the figure takes a long time, about 1 minute for 1000 frames to load

fig = plt.figure()
plt.xlim(-5, 350)
plt.ylim(-5, 200)
graph, = plt.plot([], [], 'o')

x = p.getXframes()
y = p.getYframes()

def animate(i):
    graph.set_data(x[:i+1], y[:i+1])
    return graph

ani = FuncAnimation(fig, animate, frames=1000, interval=10)
HTML(ani.to_html5_video())



